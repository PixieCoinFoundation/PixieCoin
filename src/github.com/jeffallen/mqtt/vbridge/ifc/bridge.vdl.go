// This file was auto-generated by the vanadium vdl tool.
// Source: bridge.vdl

package ifc

import (
	// VDL system imports
	"io"

	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/vdl"
)

type Message struct {
	Topic     string
	MessageId uint16
	Payload   []byte
}

func (Message) __VDLReflect(struct {
	Name string `vdl:"github.com/jeffallen/mqtt/vbridge/ifc.Message"`
}) {
}

type Topic string

func (Topic) __VDLReflect(struct {
	Name string `vdl:"github.com/jeffallen/mqtt/vbridge/ifc.Topic"`
}) {
}

func init() {
	vdl.Register((*Message)(nil))
	vdl.Register((*Topic)(nil))
}

// BridgeClientMethods is the client interface
// containing Bridge methods.
type BridgeClientMethods interface {
	// Links a pair of MQTT brokers for a given set of topics. All messages on
	// those topics received at the caller are sent on the input stream to the
	// callee, and all messages on those topics received at the callee are
	// sent on the output stream.
	Link(_ *context.T, topics []Topic, _ ...rpc.CallOpt) (BridgeLinkClientCall, error)
}

// BridgeClientStub adds universal methods to BridgeClientMethods.
type BridgeClientStub interface {
	BridgeClientMethods
	rpc.UniversalServiceMethods
}

// BridgeClient returns a client stub for Bridge.
func BridgeClient(name string) BridgeClientStub {
	return implBridgeClientStub{name}
}

type implBridgeClientStub struct {
	name string
}

func (c implBridgeClientStub) Link(ctx *context.T, i0 []Topic, opts ...rpc.CallOpt) (ocall BridgeLinkClientCall, err error) {
	var call rpc.ClientCall
	if call, err = v23.GetClient(ctx).StartCall(ctx, c.name, "Link", []interface{}{i0}, opts...); err != nil {
		return
	}
	ocall = &implBridgeLinkClientCall{ClientCall: call}
	return
}

// BridgeLinkClientStream is the client stream for Bridge.Link.
type BridgeLinkClientStream interface {
	// RecvStream returns the receiver side of the Bridge.Link client stream.
	RecvStream() interface {
		// Advance stages an item so that it may be retrieved via Value.  Returns
		// true iff there is an item to retrieve.  Advance must be called before
		// Value is called.  May block if an item is not available.
		Advance() bool
		// Value returns the item that was staged by Advance.  May panic if Advance
		// returned false or was not called.  Never blocks.
		Value() Message
		// Err returns any error encountered by Advance.  Never blocks.
		Err() error
	}
	// SendStream returns the send side of the Bridge.Link client stream.
	SendStream() interface {
		// Send places the item onto the output stream.  Returns errors
		// encountered while sending, or if Send is called after Close or
		// the stream has been canceled.  Blocks if there is no buffer
		// space; will unblock when buffer space is available or after
		// the stream has been canceled.
		Send(item Message) error
		// Close indicates to the server that no more items will be sent;
		// server Recv calls will receive io.EOF after all sent items.
		// This is an optional call - e.g. a client might call Close if it
		// needs to continue receiving items from the server after it's
		// done sending.  Returns errors encountered while closing, or if
		// Close is called after the stream has been canceled.  Like Send,
		// blocks if there is no buffer space available.
		Close() error
	}
}

// BridgeLinkClientCall represents the call returned from Bridge.Link.
type BridgeLinkClientCall interface {
	BridgeLinkClientStream
	// Finish performs the equivalent of SendStream().Close, then blocks until
	// the server is done, and returns the positional return values for the call.
	//
	// Finish returns immediately if the call has been canceled; depending on the
	// timing the output could either be an error signaling cancelation, or the
	// valid positional return values from the server.
	//
	// Calling Finish is mandatory for releasing stream resources, unless the call
	// has been canceled or any of the other methods return an error.  Finish should
	// be called at most once.
	Finish() error
}

type implBridgeLinkClientCall struct {
	rpc.ClientCall
	valRecv Message
	errRecv error
}

func (c *implBridgeLinkClientCall) RecvStream() interface {
	Advance() bool
	Value() Message
	Err() error
} {
	return implBridgeLinkClientCallRecv{c}
}

type implBridgeLinkClientCallRecv struct {
	c *implBridgeLinkClientCall
}

func (c implBridgeLinkClientCallRecv) Advance() bool {
	c.c.valRecv = Message{}
	c.c.errRecv = c.c.Recv(&c.c.valRecv)
	return c.c.errRecv == nil
}
func (c implBridgeLinkClientCallRecv) Value() Message {
	return c.c.valRecv
}
func (c implBridgeLinkClientCallRecv) Err() error {
	if c.c.errRecv == io.EOF {
		return nil
	}
	return c.c.errRecv
}
func (c *implBridgeLinkClientCall) SendStream() interface {
	Send(item Message) error
	Close() error
} {
	return implBridgeLinkClientCallSend{c}
}

type implBridgeLinkClientCallSend struct {
	c *implBridgeLinkClientCall
}

func (c implBridgeLinkClientCallSend) Send(item Message) error {
	return c.c.Send(item)
}
func (c implBridgeLinkClientCallSend) Close() error {
	return c.c.CloseSend()
}
func (c *implBridgeLinkClientCall) Finish() (err error) {
	err = c.ClientCall.Finish()
	return
}

// BridgeServerMethods is the interface a server writer
// implements for Bridge.
type BridgeServerMethods interface {
	// Links a pair of MQTT brokers for a given set of topics. All messages on
	// those topics received at the caller are sent on the input stream to the
	// callee, and all messages on those topics received at the callee are
	// sent on the output stream.
	Link(_ *context.T, _ BridgeLinkServerCall, topics []Topic) error
}

// BridgeServerStubMethods is the server interface containing
// Bridge methods, as expected by rpc.Server.
// The only difference between this interface and BridgeServerMethods
// is the streaming methods.
type BridgeServerStubMethods interface {
	// Links a pair of MQTT brokers for a given set of topics. All messages on
	// those topics received at the caller are sent on the input stream to the
	// callee, and all messages on those topics received at the callee are
	// sent on the output stream.
	Link(_ *context.T, _ *BridgeLinkServerCallStub, topics []Topic) error
}

// BridgeServerStub adds universal methods to BridgeServerStubMethods.
type BridgeServerStub interface {
	BridgeServerStubMethods
	// Describe the Bridge interfaces.
	Describe__() []rpc.InterfaceDesc
}

// BridgeServer returns a server stub for Bridge.
// It converts an implementation of BridgeServerMethods into
// an object that may be used by rpc.Server.
func BridgeServer(impl BridgeServerMethods) BridgeServerStub {
	stub := implBridgeServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implBridgeServerStub struct {
	impl BridgeServerMethods
	gs   *rpc.GlobState
}

func (s implBridgeServerStub) Link(ctx *context.T, call *BridgeLinkServerCallStub, i0 []Topic) error {
	return s.impl.Link(ctx, call, i0)
}

func (s implBridgeServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implBridgeServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{BridgeDesc}
}

// BridgeDesc describes the Bridge interface.
var BridgeDesc rpc.InterfaceDesc = descBridge

// descBridge hides the desc to keep godoc clean.
var descBridge = rpc.InterfaceDesc{
	Name:    "Bridge",
	PkgPath: "github.com/jeffallen/mqtt/vbridge/ifc",
	Methods: []rpc.MethodDesc{
		{
			Name: "Link",
			Doc:  "// Links a pair of MQTT brokers for a given set of topics. All messages on\n// those topics received at the caller are sent on the input stream to the\n// callee, and all messages on those topics received at the callee are\n// sent on the output stream.",
			InArgs: []rpc.ArgDesc{
				{"topics", ``}, // []Topic
			},
		},
	},
}

// BridgeLinkServerStream is the server stream for Bridge.Link.
type BridgeLinkServerStream interface {
	// RecvStream returns the receiver side of the Bridge.Link server stream.
	RecvStream() interface {
		// Advance stages an item so that it may be retrieved via Value.  Returns
		// true iff there is an item to retrieve.  Advance must be called before
		// Value is called.  May block if an item is not available.
		Advance() bool
		// Value returns the item that was staged by Advance.  May panic if Advance
		// returned false or was not called.  Never blocks.
		Value() Message
		// Err returns any error encountered by Advance.  Never blocks.
		Err() error
	}
	// SendStream returns the send side of the Bridge.Link server stream.
	SendStream() interface {
		// Send places the item onto the output stream.  Returns errors encountered
		// while sending.  Blocks if there is no buffer space; will unblock when
		// buffer space is available.
		Send(item Message) error
	}
}

// BridgeLinkServerCall represents the context passed to Bridge.Link.
type BridgeLinkServerCall interface {
	rpc.ServerCall
	BridgeLinkServerStream
}

// BridgeLinkServerCallStub is a wrapper that converts rpc.StreamServerCall into
// a typesafe stub that implements BridgeLinkServerCall.
type BridgeLinkServerCallStub struct {
	rpc.StreamServerCall
	valRecv Message
	errRecv error
}

// Init initializes BridgeLinkServerCallStub from rpc.StreamServerCall.
func (s *BridgeLinkServerCallStub) Init(call rpc.StreamServerCall) {
	s.StreamServerCall = call
}

// RecvStream returns the receiver side of the Bridge.Link server stream.
func (s *BridgeLinkServerCallStub) RecvStream() interface {
	Advance() bool
	Value() Message
	Err() error
} {
	return implBridgeLinkServerCallRecv{s}
}

type implBridgeLinkServerCallRecv struct {
	s *BridgeLinkServerCallStub
}

func (s implBridgeLinkServerCallRecv) Advance() bool {
	s.s.valRecv = Message{}
	s.s.errRecv = s.s.Recv(&s.s.valRecv)
	return s.s.errRecv == nil
}
func (s implBridgeLinkServerCallRecv) Value() Message {
	return s.s.valRecv
}
func (s implBridgeLinkServerCallRecv) Err() error {
	if s.s.errRecv == io.EOF {
		return nil
	}
	return s.s.errRecv
}

// SendStream returns the send side of the Bridge.Link server stream.
func (s *BridgeLinkServerCallStub) SendStream() interface {
	Send(item Message) error
} {
	return implBridgeLinkServerCallSend{s}
}

type implBridgeLinkServerCallSend struct {
	s *BridgeLinkServerCallStub
}

func (s implBridgeLinkServerCallSend) Send(item Message) error {
	return s.s.Send(item)
}
